#include <stdio.h>
#include <stdlib.h>
#include "quiz6.h"

char *female_names[] = {"Ann", "Sally","Mary","Julie","Paula","Lucille","Nichole","Jeanne","Sarah","Hillary"};
char *male_names[] = {"Robert", "James", "Fredrick", "Arthur","Jeff","Carl","Douglas","Evan","George","Henry"};
char *last_names[] = {"Smith", "Jones", "Rodrigez","White","Adams","Davis","Carroll","Adkins","Brady","Flynn"};
const int LENGTH = 10;


/*
 * Print the string <first> <middle> <last>
 * e.g. if first = "Marlin", middle = "Jay",
 * and last = "Eller", then print:
 * Marlin Jay Eller
 * 
 * If the middle name is NULL, then print: 
 * Marlin Eller
 *
 * name: a pointer to a Name
 */
void big(Name *name){
  if(name->middle == NULL)
    printf("%s %s\n", name->first, name->last);
  else
    printf("%s %s %s\n", name->first, name->middle, name->last);
}



/*
 * Print the string <last>, <first>
 * For the same example as used previously, print:
 * Eller, Marlin
 *
 * name: a pointer to a Name
 */
void last(Name *name){
  printf("%s, %s\n", name->last, name->first);
}


/*
 * Print the string <first> <last>
 * For the same example, this would be:
 * "Marlin Eller"
 * (regular usage)
 *
 * name: a pointer to a Name
 */
void reg(Name *name){
  printf("%s, %s\n", name->first, name->last);
}

/*
 * Print <first> <middle-initial><dot> <last>
 * For the same example, this would print:
 * Marlin J. Eller
 * 
 * If the middle name is NULL, print: 
 * Marlin Eller
 *
 * name: a pointer to a Name
 */
void mid(Name *name){
  printf("%s %c. %s\n", name->first, *name->middle, name->last);
}


/*
 * Print just the first name.
 * For the same example, this would print:

 * Marlin
 *
 * name: a pointer to a Name
 */
void small(Name *name){
  printf("%s ", name->first);
}



/* Given a format char, print the given
 * name in the format specified by char.
 * The mapping is shown below:
 * B -> 'big' format
 * L -> 'last' format
 * R -> 'reg' format
 * M -> 'mid' format
 * S -> 'small' format
 * 
 * name: a pointer to a Name 
 * fmt: a char indicating the format to use
 */
void fmt(Name *name, char fmt){
  switch(fmt){
  case 'B':
    big(name);
    break;
  case 'L':
    last(name);
    break;
  case 'R':
    reg(name);
    break;
  case 'M':
    mid(name);
    break;
  case 'S':
    small(name);
    break;
  }
}
	

/*
 * This function should return a randomly
 * generated name. This random name should be
 * generated as follows:
 * 1. Using a random number generator (see note below), pick either male_names or female_names
 * 2. From array you picked, generate two random indices to be the first and
 *    middle names. You can choose for the middle name to be NULL, if you desire. 
 *    A. The middle name for a female must be a female name, and a male 
 *       must have a male middle name. 
 *    B. It is okay for the first and middle name to be the same. 
 * 3. Generate one more random index to pick a name from the last_name array.
 *
 * Do not copy the strings. Copying the pointers to the strings are sufficient
 * to solve this problem. 
 *
 * Random number generator: see Flashcard 5.21 (Loops->rand). 
 * Assume the generator as been seeded (you don't need to call srand at all). 
 * Otherwise, to get a random number in a range between 0 and n, call: 
 * rand() % n; 
 *
 * Returns: a Name 
 */
Name generate_random(){
  Name *res = (Name*)malloc(sizeof(Name)); //allocate memory on heap for the Name.

  int gender = rand() % 2;
  if(gender == 0){
    res->first = female_names[rand() % LENGTH]; // produce a random index in [0,9] inclusively.
    int choose = rand() % 2;
    if(choose == 0)
      res->middle = NULL;
    else
      res->middle = female_names[rand() % LENGTH]; 
  }
  else{
    res->first = male_names[rand() % LENGTH]; 
    int choose = rand() % 2;
    if(choose == 0)
      res->middle = NULL;
    else
      res->middle = male_names[rand() % LENGTH]; 
  }

  res->last = last_names[rand() % LENGTH];	

  return *res;
}


/*
 * This function should populate an array
 * with randomly generated names. The number
 * of names to be generated is specified
 * by the parameter n.
 *
 * names: An array of n Names
 * n: The number of Names in names/length of the array. 
 */
void generate_random_array(Name* names, int n){
  names = (Name*)malloc(n * sizeof(Name));
  int i;
  for(i = 0; i < n; i++){
    names[i] = generate_random(); 
  }
}


/*
 * Given an array of names, print them according to the
 * format specified by the second parameter, fmt.
 * The char -> format mappings are same as for s_fmt.
 *
 * Exception to the rule: if format is 'S' then
 * all names should be printed on the same line.
 *
 * names: an array of n names
 * n: the number of Names/length of the array. 
 * format: char specifying format to print out. 
 */
void fmt_array(Name *names, int n, char format){
  int i = 0;
  while(i < n){
    fmt(&names[i], format);
    i++;
  }
}


/*
 * This function takes in reference to a couple and prints
 * their name as Mr. and Ms. <hubby last name>-<wife last name>
 * e.g., Mr. and Ms. Jones-Smith
 *
 * couple: pointer to the couple
 */
void couple_name(Couple *couple){
  printf("Mr. and Ms. %s-%s\n", couple->hubby->last, couple->wife->last);
}


/*
 * This function should create a couple
 * given two names. Give them a random
 * number of kids, up to MAX_NUM_KIDS.  
 * The kids should have random names, including a random last name. 
 * Suggestion: consider a helper function, add_some_kids() 
 * to add kids to the couple. 
 *
 * Note on random: see Flashcard 5.21 (Loops->rand). 
 * Assume the generator as been seeded (you don't need to call srand at all). 
 * Otherwise, to get a random number in a range between 0 and n, call: 
 * rand() % n; 
 *
 * w: the wife's name
 * h: the husband's name
 */



Name* add_some_kids(int n){
  Name* kids;
  generate_random_array(kids, n);

  return kids; 	
}


Couple new_couple(Name *w, Name *h){
  Couple *c = (Couple*)malloc(sizeof(Couple));
  c->hubby = h;
  c->wife = w;
  int n = rand() % (MAX_NUM_KIDS + 1);
  c->kids[n] = add_some_kids(n);
  c->num_kids = sizeof(c->kids) / sizeof(Name);

  return *c;
}


/*
 * This function given two couples - assume
 * these two be the bride's parents and groom's
 * parents - will pick a random kid from each
 * couple and returning them as a couple.
 * Before returning the new couple, make sure to announce
 * their wedding using the function defined below.
 *
 * What if one of parents don't have any kids? In this
 * situation you may want to define a helper function -
 * maybe something like add_some_kids() - and call this.
 *
 * bride_parents: pointer to the parents of the "bride" (note: we're equal opportunity-- this could be male or female)
 * groom_parents: pointer to the parents of the "groom" (see above note)
 *
 * return: A new Couple. You get to decide if they have kids or not! 
 */
Couple wedding(Couple *bride_parents, Couple *groom_parents){
  Couple *res = (Couple*)malloc(sizeof(Couple));

  if(groom_parents->num_kids > 0){
    res->hubby = &groom_parents->kids[rand() % groom_parents->num_kids];
  }
  else{
    groom_parents->kids = add_some_kids();
    res->hubby = &groom_parents->kids[rand() % (sizeof(groom_parents->kids) / sizeof(Name))];
  }

  if(bride_parents->num_kids > 0){
    res->wife = &bride_parents->kids[rand() % bride_parents->num_kids];
  }
  else{
    bride_parents->kids = add_some_kids();
    res->wife = &bride_parents->kids[rand() % (sizeof(bride_parents->kids) / sizeof(Name))];
  }
  res->kids = add_some_kids();
  res->num_kids = sizeof(res->kids) / sizeof(Name);
}


/*
 * Annouce the new couple's wedding by printing it
 * out in the following format:
 *
 * Mr. and Ms. Smith                         <- bride's parents
 * and
 * Mr. and Ms. Jones                         <- groom's parents
 * request the honor of your presence
 * at the marriage of their children
 * Mary Ann Smith                            <- bride'a full name
 * and
 * Edward Malcolm Jones                      <- groom's full name
 */
void announce(Couple *bride_parents, Couple *groom_parents, Couple *couple){
  printf("Mr. and Ms. %s\n", bride_parents->hubby->last);
  printf("and\n");
  printf("Mr. and Ms. %s\n", groom_parents->hubby->last);
  printf("request the honor of your presence at the marriage of their children\n");
  big(couple->wife);
  printf("and\n");
  big(couple->hubby);
}


/*
 * Given a couple, print their names and their kids names.
 * The format should follow the example shown below:
 *
 * Mr. and Ms. Smith and their 3 children: John Sally Vicky
 * OR
 * Mr. and Ms. Smith and their child: Ben
 *
 * If they have no kids then just print:
 *
 * Mr. and Ms. Jones
 */


void kids_first_name(Couple *couple){
  int i;
  for(i = 0; i < couple->num_kids; i++){
    printf(" %s", couple->kids[i].first);
  }
}


void family(Couple *couple){
  if(couple->num_kids >= 2){
    printf("Mr. and Ms. %s and their %d children:", couple->hubby->last, couple->num_kids);
    kids_first_name(couple);
    printf("\n");
  }
  else if(couple->num_kids == 1){
    printf("Mr. and Ms. %s and their child:", couple->hubby->last);
    kids_first_name(couple);
    printf("\n");
  }
  else if(couple->num_kids == 0){
    printf("Mr. and Ms. %s\n", couple->hubby->last);
  }
}




